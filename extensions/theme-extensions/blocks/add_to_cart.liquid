{% comment %}
  Premium Add to Cart Button Block
  Features 5 cutting-edge button designs inspired by top brands
  Works with current product context - no product selection needed
{% endcomment %}

<div class="atc-button-block" {{ block.shopify_attributes }}>
  <style>
    .atc-button-block {
      padding: {{ block.settings.block_padding }}px;
      margin: {{ block.settings.block_margin }}px 0;
      display: flex;
      justify-content: {{ block.settings.button_alignment }};
      align-items: center;
    }
    
    /* Button Container */
    .atc-container {
      position: relative;
      display: inline-block;
    }
    
    /* Base Button Styles */
    .atc-btn {
      position: relative;
      padding: {{ block.settings.button_padding_vertical }}px {{ block.settings.button_padding_horizontal }}px;
      font-size: {{ block.settings.button_text_size }}px;
      font-weight: {{ block.settings.button_font_weight }};
      font-family: {{ block.settings.button_font_family }};
      text-decoration: none;
      border: none;
      cursor: pointer;
      overflow: hidden;
      text-transform: {{ block.settings.button_text_transform }};
      letter-spacing: {{ block.settings.button_letter_spacing }}px;
      min-width: {{ block.settings.button_min_width }}px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      outline: none;
      user-select: none;
      -webkit-tap-highlight-color: transparent;
      transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      backdrop-filter: blur(10px);
    }
    
    .atc-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }
    
    /* Button Style 1: Apple-Inspired Glassmorphism */
    .btn-apple {
      background: rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.8);
      color: {{ block.settings.button_text_color }};
      border-radius: {{ block.settings.button_border_radius }}px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(20px);
      box-shadow: 
        0 8px 32px rgba(0, 0, 0, 0.1),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
      position: relative;
    }
    
    .btn-apple::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, 
        rgba(255, 255, 255, 0.1) 0%, 
        rgba(255, 255, 255, 0) 50%);
      border-radius: inherit;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .btn-apple:hover {
      transform: translateY(-1px) scale(1.02);
      box-shadow: 
        0 12px 40px rgba(0, 0, 0, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.3);
    }
    
    .btn-apple:hover::before {
      opacity: 1;
    }
    
    .btn-apple:active {
      transform: translateY(0) scale(0.98);
    }
    
    /* Button Style 2: Stripe-Inspired Gradient Shift */
    .btn-stripe {
      background: linear-gradient(45deg, 
        {{ block.settings.button_color }}, 
        {{ block.settings.button_color | color_lighten: 15 }}, 
        {{ block.settings.button_color | color_darken: 10 }});
      background-size: 300% 300%;
      color: {{ block.settings.button_text_color }};
      border-radius: {{ block.settings.button_border_radius }}px;
      box-shadow: 0 4px 20px rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.3);
      position: relative;
      animation: gradientShift 3s ease infinite;
    }
    
    @keyframes gradientShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }
    
    .btn-stripe::after {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, 
        transparent, 
        rgba(255, 255, 255, 0.3), 
        transparent);
      transition: left 0.6s;
    }
    
    .btn-stripe:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 30px rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.4);
    }
    
    .btn-stripe:hover::after {
      left: 100%;
    }
    
    /* Button Style 3: Nike-Inspired Morphing */
    .btn-nike {
      background: {{ block.settings.button_color }};
      color: {{ block.settings.button_text_color }};
      border-radius: {{ block.settings.button_border_radius }}px;
      position: relative;
      overflow: hidden;
      transform-style: preserve-3d;
    }
    
    .btn-nike::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, 
        transparent 30%, 
        rgba(255, 255, 255, 0.2) 50%, 
        transparent 70%);
      transform: translateX(-100%) skewX(-15deg);
      transition: transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    .btn-nike:hover {
      transform: perspective(1000px) rotateX(-5deg) translateY(-2px);
      box-shadow: 
        0 10px 25px rgba(0, 0, 0, 0.2),
        0 0 0 1px rgba(255, 255, 255, 0.1);
    }
    
    .btn-nike:hover::before {
      transform: translateX(100%) skewX(-15deg);
    }
    
    /* Button Style 4: Tesla-Inspired Neon Glow */
    .btn-tesla {
      background: transparent;
      color: {{ block.settings.button_color }};
      border: 2px solid {{ block.settings.button_color }};
      border-radius: {{ block.settings.button_border_radius }}px;
      position: relative;
      text-shadow: 0 0 10px currentColor;
      box-shadow: 
        inset 0 0 20px rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.1),
        0 0 20px rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.2);
    }
    
    .btn-tesla::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: {{ block.settings.button_color }};
      border-radius: calc({{ block.settings.button_border_radius }}px - 2px);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .btn-tesla::after {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, 
        {{ block.settings.button_color }}, 
        transparent, 
        {{ block.settings.button_color }});
      border-radius: {{ block.settings.button_border_radius }}px;
      z-index: -1;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .btn-tesla:hover {
      color: {{ block.settings.button_text_color }};
      text-shadow: none;
      box-shadow: 
        inset 0 0 30px rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.3),
        0 0 30px rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.5);
    }
    
    .btn-tesla:hover::before {
      opacity: 1;
    }
    
    .btn-tesla:hover::after {
      opacity: 1;
    }
    
    /* Button Style 5: Shopify-Inspired Liquid Morph */
    .btn-shopify {
      background: {{ block.settings.button_color }};
      color: {{ block.settings.button_text_color }};
      border-radius: {{ block.settings.button_border_radius }}px;
      position: relative;
      overflow: hidden;
    }
    
    .btn-shopify::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      background: radial-gradient(circle, 
        rgba(255, 255, 255, 0.3) 0%, 
        rgba(255, 255, 255, 0.1) 50%, 
        transparent 100%);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    .btn-shopify:hover {
      transform: scale(1.05);
      box-shadow: 0 8px 25px rgba({{ block.settings.button_color | color_to_rgb | remove: 'rgb(' | remove: ')' }}, 0.4);
    }
    
    .btn-shopify:hover::before {
      width: 300px;
      height: 300px;
    }
    
    .btn-shopify:active {
      transform: scale(0.95);
    }
    
    /* Loading, Success & Error States */
    .btn-loading {
      pointer-events: none;
    }
    
    .btn-loading .btn-text {
      opacity: 0;
    }
    
    .btn-loading .loading-spinner {
      opacity: 1;
    }
    
    .loading-spinner {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Success State */
    .btn-success .btn-text {
      opacity: 0;
    }
    
    .btn-success .success-icon {
      opacity: 1;
    }
    
    .success-icon {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0);
      opacity: 0;
      transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }
    
    .btn-success .success-icon {
      transform: translate(-50%, -50%) scale(1);
    }
    
    /* Error State */
    .btn-error {
      background: #ef4444 !important;
      color: white !important;
      animation: shake 0.5s ease-in-out;
    }
    
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-5px); }
      75% { transform: translateX(5px); }
    }
    
    /* Quantity Selector */
    .quantity-selector {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0;
      margin-bottom: 1rem;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      overflow: hidden;
      background: white;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .qty-btn {
      background: #f9fafb;
      border: none;
      padding: 12px 16px;
      cursor: pointer;
      font-weight: 600;
      font-size: 18px;
      color: #374151;
      transition: all 0.2s ease;
      min-width: 48px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .qty-btn:hover {
      background: #e5e7eb;
      color: #1f2937;
    }
    
    .qty-btn:active {
      background: #d1d5db;
      transform: scale(0.95);
    }
    
    .qty-input {
      border: none;
      padding: 12px 16px;
      width: 80px;
      text-align: center;
      font-weight: 600;
      font-size: 16px;
      background: white;
      color: #1f2937;
    }
    
    .qty-input:focus {
      outline: none;
      background: #f9fafb;
    }
    
    /* Cart Icon */
    .cart-icon {
      width: 20px;
      height: 20px;
      fill: currentColor;
      transition: transform 0.2s ease;
    }
    
    .atc-btn:hover .cart-icon {
      transform: scale(1.1);
    }
    
    /* No Product Message */
    .no-product-message {
      text-align: center;
      padding: 2rem;
      color: #6b7280;
      font-style: italic;
    }
    
    .no-product-message p {
      margin: 0;
      font-size: 14px;
    }
    
    .btn-loading .btn-text {
      opacity: 0;
    }
    
    .btn-loading .loading-spinner {
      opacity: 1;
    }
    
    .loading-spinner {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Success State */
    .btn-success {
      background: #10b981 !important;
      color: white !important;
    }
    
    .btn-success .btn-text::after {
      content: ' ✓';
    }
    
    /* Cart Icon */
    .cart-icon {
      width: 18px;
      height: 18px;
      fill: currentColor;
    }
    
    /* Quantity Selector */
    .quantity-selector {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .quantity-label {
      font-weight: 600;
      color: {{ block.settings.description_color }};
    }
    
    .quantity-controls {
      display: flex;
      align-items: center;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      overflow: hidden;
    }
    
    .quantity-btn {
      background: #f9fafb;
      border: none;
      padding: 8px 12px;
      cursor: pointer;
      font-weight: bold;
      color: #374151;
      transition: background-color 0.2s;
    }
    
    .quantity-btn:hover {
      background: #e5e7eb;
    }
    
    .quantity-input {
      border: none;
      padding: 8px 12px;
      width: 60px;
      text-align: center;
      font-weight: 600;
      background: white;
    }
    
    .quantity-input:focus {
      outline: none;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      .add-to-cart-block {
        padding: 1.5rem;
      }
      
      .add-to-cart-btn {
        min-width: 100%;
        padding: 16px 24px;
      }
      
      .quantity-selector {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }
    }
  </style>
  
  {% comment %} Use current product context - works on product pages {% endcomment %}
  {% if product and product != empty %}
    {% if product.available %}
      <form action="/cart/add" method="post" enctype="multipart/form-data" class="atc-form" data-product-id="{{ product.id }}">
        {% if block.settings.show_quantity %}
          <div class="quantity-selector">
            <button type="button" class="qty-btn qty-decrease" aria-label="Decrease quantity">−</button>
            <input type="number" name="quantity" value="1" min="1" max="{{ product.selected_or_first_available_variant.inventory_quantity | default: 999 }}" class="qty-input" id="qty-{{ block.id }}" aria-label="Quantity">
            <button type="button" class="qty-btn qty-increase" aria-label="Increase quantity">+</button>
          </div>
        {% else %}
          <input type="hidden" name="quantity" value="1">
        {% endif %}
        
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" class="variant-id">
        
        <div class="atc-container">
          <button type="submit" class="atc-btn btn-{{ block.settings.button_style }}" id="atc-{{ block.id }}" aria-label="Add {{ product.title }} to cart">
            {% if block.settings.show_icon %}
              <svg class="cart-icon" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
              </svg>
            {% endif %}
            <span class="btn-text">{{ block.settings.button_text }}</span>
            <div class="loading-spinner">
              <div class="spinner"></div>
            </div>
            <div class="success-icon">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
              </svg>
            </div>
          </button>
        </div>
      </form>
    {% else %}
      <div class="atc-container">
        <button class="atc-btn btn-{{ block.settings.button_style }}" disabled aria-label="Product sold out">
          <span class="btn-text">{{ block.settings.sold_out_text }}</span>
        </button>
      </div>
    {% endif %}
  {% else %}
    <div class="atc-container">
      <div class="no-product-message">
        <p>This Add to Cart button will appear on product pages.</p>
      </div>
    </div>
  {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('.atc-form');
  const button = document.getElementById('atc-{{ block.id }}');
  const quantityInput = document.getElementById('qty-{{ block.id }}');
  const decreaseBtn = document.querySelector('.qty-decrease');
  const increaseBtn = document.querySelector('.qty-increase');
  
  // Enhanced quantity controls with haptic feedback
  if (decreaseBtn && increaseBtn && quantityInput) {
    decreaseBtn.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
        // Haptic feedback for mobile
        if (navigator.vibrate) navigator.vibrate(10);
      }
    });
    
    increaseBtn.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      const maxValue = parseInt(quantityInput.max);
      if (currentValue < maxValue) {
        quantityInput.value = currentValue + 1;
        // Haptic feedback for mobile
        if (navigator.vibrate) navigator.vibrate(10);
      }
    });
    
    // Validate quantity input
    quantityInput.addEventListener('input', function() {
      const value = parseInt(this.value);
      const min = parseInt(this.min);
      const max = parseInt(this.max);
      
      if (value < min) this.value = min;
      if (value > max) this.value = max;
    });
  }
  
  // Advanced Add to Cart functionality
  if (form && button) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Prevent double submission
      if (button.classList.contains('btn-loading')) return;
      
      // Add loading state with animation
      button.classList.add('btn-loading');
      
      // Get form data
      const formData = new FormData(form);
      
      // Add to cart via AJAX with enhanced error handling
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams(formData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        // Success state with enhanced feedback
        button.classList.remove('btn-loading');
        button.classList.add('btn-success');
        
        // Haptic feedback for success
        if (navigator.vibrate) navigator.vibrate([50, 30, 50]);
        
        // Reset after 3 seconds
        setTimeout(() => {
          button.classList.remove('btn-success');
        }, 3000);
        
        // Trigger cart update events
        document.dispatchEvent(new CustomEvent('cart:updated', { 
          detail: { 
            item: data, 
            quantity: parseInt(formData.get('quantity')),
            variant_id: formData.get('id')
          } 
        }));
        
        // Update cart drawer/counter if present
        if (window.theme && window.theme.cart) {
          window.theme.cart.updateCount();
        }
        
        console.log('✅ Product added to cart:', data);
      })
      .catch(error => {
        // Enhanced error handling
        button.classList.remove('btn-loading');
        button.classList.add('btn-error');
        
        // Error haptic feedback
        if (navigator.vibrate) navigator.vibrate([100, 50, 100]);
        
        console.error('❌ Error adding to cart:', error);
        
        // Show user-friendly error message
        const errorMessage = error.message.includes('sold out') || error.message.includes('inventory') 
          ? 'Sorry, this item is currently out of stock.'
          : 'Unable to add item to cart. Please try again.';
        
        // Create toast notification instead of alert
        showToast(errorMessage, 'error');
        
        // Reset error state after 3 seconds
        setTimeout(() => {
          button.classList.remove('btn-error');
        }, 3000);
      });
    });
  }
  
  // Toast notification system
  function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `atc-toast atc-toast-${type}`;
    toast.textContent = message;
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'error' ? '#ef4444' : '#10b981'};
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 10000;
      transform: translateX(100%);
      transition: transform 0.3s ease;
      font-size: 14px;
      font-weight: 500;
    `;
    
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.style.transform = 'translateX(0)';
    }, 10);
    
    // Remove after 4 seconds
    setTimeout(() => {
      toast.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }, 4000);
  }
});
</script>

{% schema %}
{
  "name": "Add to Cart Button",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Button Style"
    },
    {
      "type": "select",
      "id": "button_style",
      "label": "Button Design",
      "options": [
        {
          "value": "apple",
          "label": "🍎 Apple Glassmorphism"
        },
        {
          "value": "stripe",
          "label": "💳 Stripe Gradient Shift"
        },
        {
          "value": "nike",
          "label": "👟 Nike Morphing"
        },
        {
          "value": "tesla",
          "label": "⚡ Tesla Neon Glow"
        },
        {
          "value": "shopify",
          "label": "🛍️ Shopify Liquid Morph"
        }
      ],
      "default": "apple",
      "info": "Choose from 5 cutting-edge button designs inspired by top brands"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Add to Cart"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold Out Text",
      "default": "Sold Out"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Primary Color",
      "default": "#007aff"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Text Color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Button Typography"
    },
    {
      "type": "range",
      "id": "button_text_size",
      "label": "Text Size",
      "min": 12,
      "max": 28,
      "step": 1,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "select",
      "id": "button_font_weight",
      "label": "Font Weight",
      "options": [
        { "value": "400", "label": "Normal" },
        { "value": "500", "label": "Medium" },
        { "value": "600", "label": "Semi Bold" },
        { "value": "700", "label": "Bold" }
      ],
      "default": "600"
    },
    {
      "type": "select",
      "id": "button_font_family",
      "label": "Font Family",
      "options": [
        { "value": "inherit", "label": "Theme Default" },
        { "value": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif", "label": "System Font" },
        { "value": "'Inter', sans-serif", "label": "Inter" },
        { "value": "'Poppins', sans-serif", "label": "Poppins" }
      ],
      "default": "inherit"
    },
    {
      "type": "select",
      "id": "button_text_transform",
      "label": "Text Transform",
      "options": [
        { "value": "none", "label": "None" },
        { "value": "uppercase", "label": "UPPERCASE" },
        { "value": "lowercase", "label": "lowercase" },
        { "value": "capitalize", "label": "Capitalize" }
      ],
      "default": "uppercase"
    },
    {
      "type": "range",
      "id": "button_letter_spacing",
      "label": "Letter Spacing",
      "min": -1,
      "max": 3,
      "step": 0.1,
      "default": 0.5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "Button Size & Shape"
    },
    {
      "type": "range",
      "id": "button_min_width",
      "label": "Minimum Width",
      "min": 120,
      "max": 400,
      "step": 10,
      "default": 200,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "button_padding_horizontal",
      "label": "Horizontal Padding",
      "min": 16,
      "max": 60,
      "step": 4,
      "default": 32,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "button_padding_vertical",
      "label": "Vertical Padding",
      "min": 8,
      "max": 32,
      "step": 2,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "label": "Border Radius",
      "min": 0,
      "max": 50,
      "step": 2,
      "default": 12,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "Layout & Features"
    },
    {
      "type": "select",
      "id": "button_alignment",
      "label": "Button Alignment",
      "options": [
        { "value": "flex-start", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "flex-end", "label": "Right" }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "block_padding",
      "label": "Block Padding",
      "min": 0,
      "max": 60,
      "step": 4,
      "default": 20,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "block_margin",
      "label": "Block Margin",
      "min": 0,
      "max": 40,
      "step": 4,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "checkbox",
      "id": "show_icon",
      "label": "Show Cart Icon",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_quantity",
      "label": "Show Quantity Selector",
      "default": false,
      "info": "Display +/- quantity controls above the button"
    }
  ]
}
{% endschema %}
