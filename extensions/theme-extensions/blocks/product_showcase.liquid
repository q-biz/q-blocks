{% comment %}
  Product Showcase Theme App Extension Block
  Two-column layout: Left - Product image, Right - Text content
{% endcomment %}

<div class="product-showcase-block" {{ block.shopify_attributes }}>
  <style>
    .product-showcase-block {
      display: flex;
      align-items: center;
      gap: 2rem;
      padding: 2rem;
      margin: 1rem 0;
      max-width: 100%;
    }
    
    .product-showcase-left {
      flex: 1;
      min-width: 0;
    }
    
    .product-showcase-right {
      flex: 1;
      min-width: 0;
    }
    
    .product-image {
      width: 100%;
      height: auto;
      border-radius: 8px;
      object-fit: cover;
      max-height: 400px;
    }
    
    .placeholder-image {
      width: 100%;
      height: 300px;
      background: #f5f5f5;
      border: 2px dashed #ccc;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #666;
      font-size: 1rem;
      text-align: center;
    }
    
    .model-container {
      position: relative;
      width: 100%;
      height: 400px;
      border-radius: 8px;
      overflow: hidden;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    
    .model-canvas {
      width: 100%;
      height: 100%;
      display: block;
      border-radius: 8px;
    }
    
    .loading-indicator {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(5px);
      color: #333;
      font-size: 14px;
      z-index: 10;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #333;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .fallback-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .content-title {
      font-size: {{ block.settings.title_size }}px;
      font-weight: bold;
      color: {{ block.settings.title_color }};
      margin: 0 0 1rem 0;
      line-height: 1.2;
    }
    
    .content-subtitle {
      font-size: {{ block.settings.subtitle_size }}px;
      color: {{ block.settings.subtitle_color }};
      margin: 0 0 1.5rem 0;
      line-height: 1.4;
      font-weight: 500;
    }
    
    .content-paragraph {
      font-size: {{ block.settings.text_size }}px;
      color: {{ block.settings.text_color }};
      line-height: 1.6;
      margin: 0;
    }
    
    @media (max-width: 768px) {
      .product-showcase-block {
        flex-direction: column;
        gap: 1.5rem;
        padding: 1.5rem;
      }
      
      .product-showcase-left,
      .product-showcase-right {
        flex: none;
        width: 100%;
      }
    }
  </style>
  
  <div class="product-showcase-left">
    {% if block.settings.product != blank %}
      {% assign product = all_products[block.settings.product] %}
      
      {% if product.featured_image and block.settings.enable_3d %}
        <!-- 3D Image Container -->
        <div id="model-container-{{ block.id }}" class="model-container">
          <canvas id="model-canvas-{{ block.id }}" class="model-canvas"></canvas>
          <div id="loading-{{ block.id }}" class="loading-indicator">
            <div class="spinner"></div>
            <span>Loading 3D View...</span>
          </div>
        </div>
      {% elsif product.featured_image %}
        <img 
          src="{{ product.featured_image | image_url: width: 600 }}" 
          alt="{{ product.featured_image.alt | default: product.title }}"
          class="product-image"
          width="600"
          height="400"
          loading="lazy"
        />
      {% else %}
        <div class="placeholder-image">
          <span>{{ product.title }}<br>No image available</span>
        </div>
      {% endif %}
    {% else %}
      <div class="placeholder-image">
        <span>Select a product to display</span>
      </div>
    {% endif %}
  </div>
  
  <div class="product-showcase-right">
    {% if block.settings.title != blank %}
      <h2 class="content-title">{{ block.settings.title }}</h2>
    {% endif %}
    
    {% if block.settings.subtitle != blank %}
      <h3 class="content-subtitle">{{ block.settings.subtitle }}</h3>
    {% endif %}
    
    {% if block.settings.paragraph != blank %}
      <p class="content-paragraph">{{ block.settings.paragraph }}</p>
    {% endif %}
  </div>
</div>

<!-- Three.js CDN -->
<script defer src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

<script>
// Global error handler for 3D debugging
window.addEventListener('error', function(e) {
  if (e.message.includes('THREE') || e.filename.includes('three')) {
    console.error('üö® THREE.js Error:', {
      message: e.message,
      filename: e.filename,
      lineno: e.lineno,
      colno: e.colno,
      error: e.error
    });
  }
});

// Log browser support info
console.log('üåê Browser Info:', {
  userAgent: navigator.userAgent,
  webGL: !!window.WebGLRenderingContext,
  webGL2: !!window.WebGL2RenderingContext,
  devicePixelRatio: window.devicePixelRatio
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ DOM Content Loaded - Product Showcase Block {{ block.id }}');
  console.log('üì¶ Block settings:', {
    enable_3d: {{ block.settings.enable_3d | default: false }},
    rotation_speed: {{ block.settings.rotation_speed | default: 1 }},
    model_scale: {{ block.settings.model_scale | default: 1.5 }},
    camera_distance: {{ block.settings.camera_distance | default: 3 }},
    camera_height: {{ block.settings.camera_height | default: 0 }},
    enable_bobbing: {{ block.settings.enable_bobbing | default: false }}
  });
  
  {% if block.settings.enable_3d %}
    {% if block.settings.product != blank %}
      {% assign product = all_products[block.settings.product] %}
      {% if product.featured_image %}
        console.log('‚úÖ 3D enabled with product image, initializing 3D view...');
        console.log('üñºÔ∏è Image URL:', '{{ product.featured_image | image_url: width: 600 }}');
        initializeModel{{ block.id | replace: '-', '_' }}();
      {% else %}
        console.log('‚ùå No product image available for 3D view');
      {% endif %}
    {% else %}
      console.log('‚ùå No product selected for 3D view');
    {% endif %}
  {% else %}
    console.log('‚ùå 3D view disabled, showing regular image');
  {% endif %}
});

{% if block.settings.enable_3d %}
function initializeModel{{ block.id | replace: '-', '_' }}() {
  console.log('üéØ Starting 3D image initialization for block {{ block.id }}');
  
  const container = document.getElementById('model-container-{{ block.id }}');
  const canvas = document.getElementById('model-canvas-{{ block.id }}');
  const loading = document.getElementById('loading-{{ block.id }}');
  
  console.log('üîç DOM Elements found:', {
    container: !!container,
    canvas: !!canvas,
    loading: !!loading
  });
  
  if (!container || !canvas) {
    console.error('‚ùå Required DOM elements not found!', {
      container: container,
      canvas: canvas
    });
    return;
  }
  
  console.log('üìè Container dimensions:', {
    width: container.offsetWidth,
    height: container.offsetHeight
  });
  
  // Check if Three.js is loaded
  if (typeof THREE === 'undefined') {
    console.error('‚ùå THREE.js not loaded!');
    return;
  }
  console.log('‚úÖ THREE.js loaded:', THREE.REVISION);
  
  // Scene setup
  console.log('üé¨ Creating Three.js scene...');
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xf5f7fa);
  
  const camera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
  
  console.log('üñ•Ô∏è Setting up WebGL renderer...');
  const renderer = new THREE.WebGLRenderer({ 
    canvas: canvas, 
    antialias: true, 
    alpha: true 
  });
  
  renderer.setSize(container.offsetWidth, container.offsetHeight);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  renderer.outputEncoding = THREE.sRGBEncoding;
  
  console.log('‚úÖ Renderer setup complete:', {
    size: [container.offsetWidth, container.offsetHeight],
    pixelRatio: renderer.getPixelRatio()
  });
  
  // Lighting setup
  console.log('üí° Setting up lighting...');
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
  scene.add(ambientLight);
  
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
  directionalLight.position.set(5, 5, 5);
  scene.add(directionalLight);
  console.log('‚úÖ Lighting setup complete');
  
  // Create intelligent 3D object with background removal and view synthesis
  console.log('üñºÔ∏è Creating smart 3D object from product image...');
  const imageUrl = '{{ product.featured_image | image_url: width: 600 }}';
  
  // Process image for background removal and 3D conversion
  processImageFor3D(imageUrl, function(processedTextures) {
    console.log('‚úÖ Image processing complete, creating 3D object...');
    
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = function() {
      const aspectRatio = img.width / img.height;
      
      console.log('üìê Image dimensions:', {
        width: img.width,
        height: img.height,
        aspectRatio: aspectRatio
      });
      
      // Create 3D geometry based on product type (default to cylinder for now)
      const geometry = createSmartGeometry(aspectRatio);
      
      // Create materials with processed textures
      const materials = createSmartMaterials(processedTextures);
      
      // Create 3D object
      window['model_{{ block.id | replace: "-", "_" }}'] = new THREE.Mesh(geometry, materials);
      const model = window['model_{{ block.id | replace: "-", "_" }}'];
      
      // Apply scale
      const scale = {{ block.settings.model_scale | default: 1.5 }};
      model.scale.setScalar(scale);
      
      scene.add(model);
      
      // Position camera
      camera.position.z = {{ block.settings.camera_distance | default: 3 }};
      camera.position.y = {{ block.settings.camera_height | default: 0 }};
      
      console.log('üì∑ Camera positioned at:', {
        position: camera.position,
        aspect: camera.aspect
      });
      
      // Hide loading indicator
      if (loading) {
        loading.style.display = 'none';
        console.log('‚úÖ Loading indicator hidden');
      }
      
      // Start animation loop
      console.log('üé¨ Starting animation loop...');
      animate();
    };
    img.src = imageUrl;
  });
  
  // Function to process image for 3D conversion
  function processImageFor3D(imageUrl, callback) {
    console.log('ü§ñ Processing image for 3D conversion...');
    
    // Load original image
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = function() {
      // Create canvas for image processing
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      
      // Step 1: Remove background
      removeBackground(canvas, function(cleanImage) {
        console.log('‚úÖ Background removed');
        
        // Step 2: Generate additional views using AI
        generateAdditionalViews(cleanImage, function(views) {
          console.log('‚úÖ Additional views generated:', views.length);
          
          // Create textures from processed images
          const textureLoader = new THREE.TextureLoader();
          const processedTextures = {
            front: textureLoader.load(cleanImage),
            back: views.back ? textureLoader.load(views.back) : textureLoader.load(cleanImage),
            sides: views.sides || []
          };
          
          callback(processedTextures);
        });
      });
    };
    img.src = imageUrl;
  }
  
  // Function to remove background using canvas processing
  function removeBackground(canvas, callback) {
    console.log('üé® Removing background...');
    const ctx = canvas.getContext('2d');
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;
    
    // Simple background removal based on edge detection and color similarity
    // This is a basic implementation - for production, you'd use AI services
    const corners = [
      data.slice(0, 4), // top-left
      data.slice((canvas.width - 1) * 4, (canvas.width - 1) * 4 + 4), // top-right
      data.slice((canvas.height - 1) * canvas.width * 4, (canvas.height - 1) * canvas.width * 4 + 4), // bottom-left
      data.slice(((canvas.height - 1) * canvas.width + (canvas.width - 1)) * 4, ((canvas.height - 1) * canvas.width + (canvas.width - 1)) * 4 + 4) // bottom-right
    ];
    
    // Determine background color (most common corner color)
    const bgColor = getMostCommonColor(corners);
    console.log('üéØ Detected background color:', bgColor);
    
    // Remove background pixels
    for (let i = 0; i < data.length; i += 4) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // Check if pixel is similar to background
      const sensitivity = {{ block.settings.bg_removal_sensitivity | default: 5 }};
      const threshold = sensitivity * 10; // Convert 1-10 scale to 10-100 threshold
      if (isColorSimilar([r, g, b], bgColor, threshold)) {
        data[i + 3] = 0; // Make transparent
      }
    }
    
    ctx.putImageData(imageData, 0, 0);
    callback(canvas.toDataURL());
  }
  
  // Function to generate additional views (simplified - in production use AI APIs)
  function generateAdditionalViews(frontImage, callback) {
    console.log('üîÑ Generating additional product views...');
    
    // For now, create a mirrored/processed back view
    // In production, you'd call AI services like:
    // - Stability AI for view synthesis
    // - Remove.bg for better background removal
    // - Custom trained models for product view generation
    
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = function() {
      canvas.width = img.width;
      canvas.height = img.height;
      
      // Create back view by flipping and darkening slightly
      ctx.scale(-1, 1);
      ctx.translate(-canvas.width, 0);
      ctx.filter = 'brightness(0.8) contrast(0.9)';
      ctx.drawImage(img, 0, 0);
      
      const backView = canvas.toDataURL();
      
      // Generate side views (simplified)
      const sideViews = generateSideViews(img);
      
      callback({
        back: backView,
        sides: sideViews
      });
    };
    img.src = frontImage;
  }
  
  // Function to create smart geometry based on product
  function createSmartGeometry(aspectRatio) {
    console.log('üèóÔ∏è Creating smart geometry...');
    const objectShape = '{{ block.settings.object_shape | default: "auto" }}';
    
    let geometry;
    
    if (objectShape === 'auto') {
      // Auto-detect based on aspect ratio
      if (aspectRatio > 1.2) {
        // Wide products - use box geometry
        geometry = new THREE.BoxGeometry(2, 2 / aspectRatio, 0.5);
        console.log('üì¶ Auto-selected: Box geometry for wide product');
      } else {
        // Tall or square products - use cylinder
        geometry = new THREE.CylinderGeometry(0.8, 0.8, 2, 16);
        console.log('üõ¢Ô∏è Auto-selected: Cylinder geometry for tall/square product');
      }
    } else if (objectShape === 'cylinder') {
      geometry = new THREE.CylinderGeometry(0.8, 0.8, 2, 16);
      console.log('üõ¢Ô∏è User-selected: Cylinder geometry');
    } else if (objectShape === 'box') {
      geometry = new THREE.BoxGeometry(2, 2 / aspectRatio, 0.5);
      console.log('üì¶ User-selected: Box geometry');
    }
    
    return geometry;
  }
  
  // Function to create materials for different faces
  function createSmartMaterials(textures) {
    console.log('üé® Creating smart materials...');
    
    return [
      new THREE.MeshLambertMaterial({ map: textures.front, transparent: true }), // front
      new THREE.MeshLambertMaterial({ map: textures.back, transparent: true }),  // back
      new THREE.MeshLambertMaterial({ map: textures.front, transparent: true }), // top
      new THREE.MeshLambertMaterial({ map: textures.front, transparent: true }), // bottom
      new THREE.MeshLambertMaterial({ map: textures.front, transparent: true }), // right
      new THREE.MeshLambertMaterial({ map: textures.front, transparent: true })  // left
    ];
  }
  
  // Helper functions
  function getMostCommonColor(corners) {
    // Simplified - return average of corner colors
    const avg = [0, 0, 0];
    corners.forEach(corner => {
      avg[0] += corner[0];
      avg[1] += corner[1];
      avg[2] += corner[2];
    });
    return [avg[0] / corners.length, avg[1] / corners.length, avg[2] / corners.length];
  }
  
  function isColorSimilar(color1, color2, threshold) {
    const diff = Math.sqrt(
      Math.pow(color1[0] - color2[0], 2) +
      Math.pow(color1[1] - color2[1], 2) +
      Math.pow(color1[2] - color2[2], 2)
    );
    return diff < threshold;
  }
  
  function generateSideViews(img) {
    // Simplified side view generation
    // In production, use AI for proper view synthesis
    return [];
  }
  
  // Animation loop
  let animationStarted = false;
  let clock = new THREE.Clock();
  
  function animate() {
    if (!animationStarted) {
      console.log('üé¨ Animation loop started successfully!');
      animationStarted = true;
    }
    
    requestAnimationFrame(animate);
    
    const model = window['model_{{ block.id | replace: "-", "_" }}'];
    if (model) {
      // Continuous rotation
      const rotationSpeed = {{ block.settings.rotation_speed | default: 1 }} * 0.01;
      model.rotation.y += rotationSpeed;
      
      // Optional: slight up-down bobbing
      {% if block.settings.enable_bobbing %}
        model.position.y += Math.sin(clock.getElapsedTime() * 2) * 0.01;
      {% endif %}
    }
    
    try {
      renderer.render(scene, camera);
    } catch (renderError) {
      console.error('‚ùå Render error:', renderError);
    }
  }
  
  // Handle window resize
  function handleResize() {
    console.log('üîÑ Window resize detected');
    if (!container || !camera || !renderer) {
      console.log('‚ùå Missing objects for resize');
      return;
    }
    
    const width = container.offsetWidth;
    const height = container.offsetHeight;
    
    console.log('üìè New dimensions:', { width, height });
    
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
  }
  
  window.addEventListener('resize', handleResize);
  console.log('‚úÖ Resize listener added');
  
  // Handle visibility change for performance
  document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
      console.log('‚è∏Ô∏è Tab hidden - pausing animation');
      renderer.setAnimationLoop(null);
    } else {
      console.log('‚ñ∂Ô∏è Tab visible - resuming animation');
      renderer.setAnimationLoop(animate);
    }
  });
  console.log('‚úÖ Visibility change listener added');
  
  // Cleanup function
  window.addEventListener('beforeunload', function() {
    console.log('üßπ Cleaning up 3D resources...');
    if (renderer) {
      renderer.dispose();
    }
    if (model) {
      scene.remove(model);
    }
  });
  console.log('‚úÖ Cleanup listener added');
}
{% endif %}
</script>

{% schema %}
{
  "name": "Product Showcase",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Select Product"
    },
    {
      "type": "header",
      "content": "3D Display Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_3d",
      "label": "Enable 3D Spinning View",
      "default": false,
      "info": "Convert the product image into a spinning 3D display"
    },
    {
      "type": "range",
      "id": "rotation_speed",
      "label": "Rotation Speed",
      "min": 0,
      "max": 5,
      "step": 1,
      "default": 1,
      "info": "How fast the model rotates (0 = no rotation, 5 = fastest)"
    },
    {
      "type": "range",
      "id": "model_scale",
      "label": "Model Scale",
      "min": 0.5,
      "max": 3.0,
      "step": 0.1,
      "default": 1.5,
      "info": "Size of the 3D model"
    },
    {
      "type": "range",
      "id": "camera_distance",
      "label": "Camera Distance",
      "min": 1,
      "max": 8,
      "step": 0.5,
      "default": 3,
      "info": "How far the camera is from the model"
    },
    {
      "type": "range",
      "id": "camera_height",
      "label": "Camera Height",
      "min": -2,
      "max": 2,
      "step": 0.2,
      "default": 0,
      "info": "Vertical position of the camera"
    },
    {
      "type": "checkbox",
      "id": "enable_bobbing",
      "label": "Enable Gentle Bobbing Animation",
      "default": false,
      "info": "Adds a subtle up-down movement to the model"
    },
    {
      "type": "select",
      "id": "object_shape",
      "label": "3D Object Shape",
      "options": [
        {
          "value": "auto",
          "label": "Auto-detect (Recommended)"
        },
        {
          "value": "cylinder",
          "label": "Cylinder (Round products)"
        },
        {
          "value": "box",
          "label": "Box (Rectangular products)"
        }
      ],
      "default": "auto",
      "info": "Choose the 3D shape that best fits your product"
    },
    {
      "type": "range",
      "id": "bg_removal_sensitivity",
      "label": "Background Removal Sensitivity",
      "min": 1,
      "max": 10,
      "step": 1,
      "default": 5,
      "info": "Higher values remove more background (1=conservative, 10=aggressive)"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Featured Product"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Discover something amazing"
    },
    {
      "type": "textarea",
      "id": "paragraph",
      "label": "Description",
      "default": "Add your product description here. This is a great place to highlight key features and benefits that make your product special."
    },
    {
      "type": "header",
      "content": "Title Styling"
    },
    {
      "type": "range",
      "id": "title_size",
      "label": "Title Font Size",
      "min": 16,
      "max": 48,
      "step": 2,
      "default": 32,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title Color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Subtitle Styling"
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "label": "Subtitle Font Size",
      "min": 12,
      "max": 32,
      "step": 2,
      "default": 20,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle Color",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Text Styling"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text Font Size",
      "min": 12,
      "max": 24,
      "step": 1,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#333333"
    }
  ]
}
{% endschema %}

