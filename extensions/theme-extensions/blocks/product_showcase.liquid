{% comment %}
  Product Showcase Theme App Extension Block
  Two-column layout: Left - Product image, Right - Text content
{% endcomment %}

<div class="product-showcase-block" {{ block.shopify_attributes }}>
  <style>
    .product-showcase-block {
      display: flex;
      align-items: center;
      gap: 2rem;
      padding: 2rem;
      margin: 1rem 0;
      max-width: 100%;
    }
    
    .product-showcase-left {
      flex: 1;
      min-width: 0;
    }
    
    .product-showcase-right {
      flex: 1;
      min-width: 0;
    }
    
    .product-image {
      width: 100%;
      height: auto;
      border-radius: 8px;
      object-fit: cover;
      max-height: 400px;
    }
    
    .placeholder-image {
      width: 100%;
      height: 300px;
      background: #f5f5f5;
      border: 2px dashed #ccc;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #666;
      font-size: 1rem;
      text-align: center;
    }
    
    .model-container {
      position: relative;
      width: 100%;
      height: 400px;
      border-radius: 8px;
      overflow: hidden;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    
    .model-canvas {
      width: 100%;
      height: 100%;
      display: block;
      border-radius: 8px;
    }
    
    .loading-indicator {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(5px);
      color: #333;
      font-size: 14px;
      z-index: 10;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #333;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .fallback-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .content-title {
      font-size: {{ block.settings.title_size }}px;
      font-weight: bold;
      color: {{ block.settings.title_color }};
      margin: 0 0 1rem 0;
      line-height: 1.2;
    }
    
    .content-subtitle {
      font-size: {{ block.settings.subtitle_size }}px;
      color: {{ block.settings.subtitle_color }};
      margin: 0 0 1.5rem 0;
      line-height: 1.4;
      font-weight: 500;
    }
    
    .content-paragraph {
      font-size: {{ block.settings.text_size }}px;
      color: {{ block.settings.text_color }};
      line-height: 1.6;
      margin: 0;
    }
    
    @media (max-width: 768px) {
      .product-showcase-block {
        flex-direction: column;
        gap: 1.5rem;
        padding: 1.5rem;
      }
      
      .product-showcase-left,
      .product-showcase-right {
        flex: none;
        width: 100%;
      }
    }
  </style>
  
  <div class="product-showcase-left">
    {% if block.settings.product != blank %}
      {% assign product = all_products[block.settings.product] %}
      
      {% if product.featured_image and block.settings.enable_3d %}
        <!-- 3D Image Container -->
        <div id="model-container-{{ block.id }}" class="model-container">
          <canvas id="model-canvas-{{ block.id }}" class="model-canvas"></canvas>
          <div id="loading-{{ block.id }}" class="loading-indicator">
            <div class="spinner"></div>
            <span>Loading 3D View...</span>
          </div>
        </div>
      {% elsif product.featured_image %}
        <img 
          src="{{ product.featured_image | image_url: width: 600 }}" 
          alt="{{ product.featured_image.alt | default: product.title }}"
          class="product-image"
          width="600"
          height="400"
          loading="lazy"
        />
      {% else %}
        <div class="placeholder-image">
          <span>{{ product.title }}<br>No image available</span>
        </div>
      {% endif %}
    {% else %}
      <div class="placeholder-image">
        <span>Select a product to display</span>
      </div>
    {% endif %}
  </div>
  
  <div class="product-showcase-right">
    {% if block.settings.title != blank %}
      <h2 class="content-title">{{ block.settings.title }}</h2>
    {% endif %}
    
    {% if block.settings.subtitle != blank %}
      <h3 class="content-subtitle">{{ block.settings.subtitle }}</h3>
    {% endif %}
    
    {% if block.settings.paragraph != blank %}
      <p class="content-paragraph">{{ block.settings.paragraph }}</p>
    {% endif %}
  </div>
</div>

<!-- Three.js CDN and Advanced Libraries -->
<script defer src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.20.0/dist/tf.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/@tensorflow-models/depth-estimation@0.0.6/dist/depth-estimation.min.js"></script>

<script>
// Global error handler for 3D debugging
window.addEventListener('error', function(e) {
  if (e.message.includes('THREE') || e.filename.includes('three')) {
    console.error('üö® THREE.js Error:', {
      message: e.message,
      filename: e.filename,
      lineno: e.lineno,
      colno: e.colno,
      error: e.error
    });
  }
});

// Log browser support info
console.log('üåê Browser Info:', {
  userAgent: navigator.userAgent,
  webGL: !!window.WebGLRenderingContext,
  webGL2: !!window.WebGL2RenderingContext,
  devicePixelRatio: window.devicePixelRatio
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ DOM Content Loaded - Product Showcase Block {{ block.id }}');
  console.log('üì¶ Block settings:', {
    enable_3d: {{ block.settings.enable_3d | default: false }},
    rotation_speed: {{ block.settings.rotation_speed | default: 1 }},
    model_scale: {{ block.settings.model_scale | default: 1.5 }},
    camera_distance: {{ block.settings.camera_distance | default: 3 }},
    camera_height: {{ block.settings.camera_height | default: 0 }},
    enable_bobbing: {{ block.settings.enable_bobbing | default: false }}
  });
  
  {% if block.settings.enable_3d %}
    {% if block.settings.product != blank %}
      {% assign product = all_products[block.settings.product] %}
      {% if product.featured_image %}
        console.log('‚úÖ 3D enabled with product image, initializing 3D view...');
        console.log('üñºÔ∏è Image URL:', '{{ product.featured_image | image_url: width: 600 }}');
        initializeModel{{ block.id | replace: '-', '_' }}();
      {% else %}
        console.log('‚ùå No product image available for 3D view');
      {% endif %}
    {% else %}
      console.log('‚ùå No product selected for 3D view');
    {% endif %}
  {% else %}
    console.log('‚ùå 3D view disabled, showing regular image');
  {% endif %}
});

{% if block.settings.enable_3d %}
function initializeModel{{ block.id | replace: '-', '_' }}() {
  console.log('üéØ Starting 3D image initialization for block {{ block.id }}');
  
  const container = document.getElementById('model-container-{{ block.id }}');
  const canvas = document.getElementById('model-canvas-{{ block.id }}');
  const loading = document.getElementById('loading-{{ block.id }}');
  
  console.log('üîç DOM Elements found:', {
    container: !!container,
    canvas: !!canvas,
    loading: !!loading
  });
  
  if (!container || !canvas) {
    console.error('‚ùå Required DOM elements not found!', {
      container: container,
      canvas: canvas
    });
    return;
  }
  
  console.log('üìè Container dimensions:', {
    width: container.offsetWidth,
    height: container.offsetHeight
  });
  
  // Check if Three.js is loaded
  if (typeof THREE === 'undefined') {
    console.error('‚ùå THREE.js not loaded!');
    return;
  }
  console.log('‚úÖ THREE.js loaded:', THREE.REVISION);
  
  // Scene setup
  console.log('üé¨ Creating Three.js scene...');
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xf5f7fa);
  
  const camera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
  
  console.log('üñ•Ô∏è Setting up WebGL renderer...');
  const renderer = new THREE.WebGLRenderer({ 
    canvas: canvas, 
    antialias: true, 
    alpha: true 
  });
  
  renderer.setSize(container.offsetWidth, container.offsetHeight);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  renderer.outputEncoding = THREE.sRGBEncoding;
  
  console.log('‚úÖ Renderer setup complete:', {
    size: [container.offsetWidth, container.offsetHeight],
    pixelRatio: renderer.getPixelRatio()
  });
  
  // Lighting setup
  console.log('üí° Setting up lighting...');
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
  scene.add(ambientLight);
  
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
  directionalLight.position.set(5, 5, 5);
  scene.add(directionalLight);
  console.log('‚úÖ Lighting setup complete');
  
  /**
   * Professional 3D Product System
   * Engineered for reliability and maintainability
   */
  class Product3DSystem {
    constructor(config) {
      this.blockId = config.blockId;
      this.imageUrl = config.imageUrl;
      this.settings = config.settings;
      this.scene = config.scene;
      this.camera = config.camera;
      this.loading = config.loading;
      
      // System state
      this.dependencies = {
        threejs: false,
        tensorflow: false,
        depthEstimation: false
      };
      
      console.log('üèóÔ∏è Product3DSystem initialized for block:', this.blockId);
      console.log('‚öôÔ∏è Configuration:', config);
    }
    
    async initialize() {
      console.log('üöÄ Starting 3D system initialization...');
      
      try {
        // Step 1: Validate dependencies
        await this._validateDependencies();
        
        // Step 2: Load and process image
        const image = await this._loadImage();
        
        // Step 3: Process image for 3D
        const processedData = await this._processImage(image);
        
        // Step 4: Generate 3D mesh
        const mesh = await this._generateMesh(processedData);
        
        // Step 5: Configure scene
        this._configureScene(mesh);
        
        console.log('‚úÖ 3D system initialization complete');
        return mesh;
        
      } catch (error) {
        console.error('‚ùå 3D system initialization failed:', error);
        throw error;
      }
    }
    
    async _validateDependencies() {
      console.log('üîç Validating dependencies...');
      
      // Check THREE.js
      if (typeof THREE === 'undefined') {
        throw new Error('THREE.js is not loaded');
      }
      this.dependencies.threejs = true;
      console.log('‚úÖ THREE.js available:', THREE.REVISION);
      
      // Check TensorFlow.js (with timeout)
      const tfTimeout = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('TensorFlow.js loading timeout')), 3000)
      );
      
      const tfCheck = new Promise((resolve) => {
        if (typeof tf !== 'undefined') {
          resolve(true);
        } else {
          const interval = setInterval(() => {
            if (typeof tf !== 'undefined') {
              clearInterval(interval);
              resolve(true);
            }
          }, 100);
        }
      });
      
      try {
        await Promise.race([tfCheck, tfTimeout]);
        this.dependencies.tensorflow = true;
        console.log('‚úÖ TensorFlow.js available:', tf.version);
      } catch (error) {
        console.warn('‚ö†Ô∏è TensorFlow.js not available:', error.message);
      }
      
      // Check Depth Estimation (with timeout)
      const depthTimeout = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('DepthEstimation loading timeout')), 3000)
      );
      
      const depthCheck = new Promise((resolve) => {
        if (typeof depthEstimation !== 'undefined') {
          resolve(true);
        } else {
          const interval = setInterval(() => {
            if (typeof depthEstimation !== 'undefined') {
              clearInterval(interval);
              resolve(true);
            }
          }, 100);
        }
      });
      
      try {
        await Promise.race([depthCheck, depthTimeout]);
        this.dependencies.depthEstimation = true;
        console.log('‚úÖ DepthEstimation available');
      } catch (error) {
        console.warn('‚ö†Ô∏è DepthEstimation not available:', error.message);
      }
      
      console.log('üìä Dependency status:', this.dependencies);
    }
    
    async _loadImage() {
      console.log('üì∑ Loading image:', this.imageUrl);
      
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'anonymous';
        
        img.onload = () => {
          console.log('‚úÖ Image loaded:', {
            width: img.width,
            height: img.height,
            aspectRatio: (img.width / img.height).toFixed(2)
          });
          resolve(img);
        };
        
        img.onerror = () => {
          const error = new Error(`Failed to load image: ${this.imageUrl}`);
          console.error('‚ùå Image loading failed:', error);
          reject(error);
        };
        
        img.src = this.imageUrl;
      });
    }
    
    async _processImage(image) {
      console.log('üé® Processing image for 3D conversion...');
      
      try {
        // Remove background
        const cleanImage = await this._removeBackground(image);
        console.log('‚úÖ Background removal complete');
        
        // Generate depth map
        const depthMap = await this._generateDepthMap(cleanImage);
        console.log('‚úÖ Depth map generation complete');
        
        return {
          image: cleanImage,
          depthMap: depthMap,
          originalImage: image
        };
        
      } catch (error) {
        console.error('‚ùå Image processing failed:', error);
        throw error;
      }
    }
    
    async _removeBackground(image) {
      console.log('üé® Removing background...');
      
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = image.width;
      canvas.height = image.height;
      ctx.drawImage(image, 0, 0);
      
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;
      
      // Smart corner detection for background color
      const corners = this._getCornerColors(data, canvas.width, canvas.height);
      const backgroundColor = this._calculateBackgroundColor(corners);
      
      console.log('üéØ Detected background color:', backgroundColor);
      
      // Remove background with configurable sensitivity
      const threshold = this.settings.bgRemovalSensitivity * 10;
      let removedPixels = 0;
      
      for (let i = 0; i < data.length; i += 4) {
        const pixel = [data[i], data[i + 1], data[i + 2]];
        const distance = this._colorDistance(pixel, backgroundColor);
        
        if (distance < threshold) {
          data[i + 3] = 0; // Make transparent
          removedPixels++;
        }
      }
      
      ctx.putImageData(imageData, 0, 0);
      
      console.log('üìä Background removal stats:', {
        totalPixels: data.length / 4,
        removedPixels: removedPixels,
        removalPercentage: ((removedPixels / (data.length / 4)) * 100).toFixed(1) + '%'
      });
      
      return canvas.toDataURL();
    }
    
    _getCornerColors(data, width, height) {
      return [
        [data[0], data[1], data[2]], // top-left
        [data[(width - 1) * 4], data[(width - 1) * 4 + 1], data[(width - 1) * 4 + 2]], // top-right
        [data[((height - 1) * width) * 4], data[((height - 1) * width) * 4 + 1], data[((height - 1) * width) * 4 + 2]], // bottom-left
        [data[((height - 1) * width + (width - 1)) * 4], data[((height - 1) * width + (width - 1)) * 4 + 1], data[((height - 1) * width + (width - 1)) * 4 + 2]] // bottom-right
      ];
    }
    
    _calculateBackgroundColor(corners) {
      return [
        Math.round(corners.reduce((sum, corner) => sum + corner[0], 0) / corners.length),
        Math.round(corners.reduce((sum, corner) => sum + corner[1], 0) / corners.length),
        Math.round(corners.reduce((sum, corner) => sum + corner[2], 0) / corners.length)
      ];
    }
    
    _colorDistance(color1, color2) {
      return Math.sqrt(
        Math.pow(color1[0] - color2[0], 2) +
        Math.pow(color1[1] - color2[1], 2) +
        Math.pow(color1[2] - color2[2], 2)
      );
    }
    
    async _generateDepthMap(imageDataUrl) {
      console.log('üß† Generating depth map...');
      
      if (this.dependencies.tensorflow && this.dependencies.depthEstimation) {
        try {
          console.log('ü§ñ Using AI depth estimation...');
          const model = await depthEstimation.createEstimator(
            depthEstimation.SupportedModels.ARPortraitDepth
          );
          
          const img = await this._createImageFromDataUrl(imageDataUrl);
          const depthMap = await model.estimateDepth(img);
          
          console.log('‚úÖ AI depth estimation complete:', {
            width: depthMap.width,
            height: depthMap.height,
            dataType: typeof depthMap.data
          });
          
          return depthMap;
          
        } catch (error) {
          console.warn('‚ö†Ô∏è AI depth estimation failed:', error.message);
          console.log('üîÑ Falling back to procedural depth...');
        }
      }
      
      // Procedural depth generation
      return this._generateProceduralDepth(imageDataUrl);
    }
    
    async _generateProceduralDepth(imageDataUrl) {
      console.log('üîß Generating procedural depth map...');
      
      const img = await this._createImageFromDataUrl(imageDataUrl);
      
      // Use smaller resolution for depth map to prevent memory issues
      const maxResolution = 128;
      const scale = Math.min(maxResolution / img.width, maxResolution / img.height);
      const depthWidth = Math.floor(img.width * scale);
      const depthHeight = Math.floor(img.height * scale);
      
      console.log('üìê Depth map resolution:', {
        original: `${img.width}x${img.height}`,
        depth: `${depthWidth}x${depthHeight}`,
        scale: scale.toFixed(3)
      });
      
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = depthWidth;
      canvas.height = depthHeight;
      
      // Draw scaled image
      ctx.drawImage(img, 0, 0, depthWidth, depthHeight);
      
      const imageData = ctx.getImageData(0, 0, depthWidth, depthHeight);
      const { data } = imageData;
      const totalPixels = depthWidth * depthHeight;
      const depthData = new Float32Array(totalPixels);
      
      const centerX = depthWidth / 2;
      const centerY = depthHeight / 2;
      const maxDistance = Math.sqrt(centerX * centerX + centerY * centerY);
      
      let minDepth = 1;
      let maxDepth = 0;
      let processedPixels = 0;
      
      // Process in chunks to prevent stack overflow
      const chunkSize = 1000;
      let pixelIndex = 0;
      
      const processChunk = () => {
        const endIndex = Math.min(pixelIndex + chunkSize, totalPixels);
        
        for (let i = pixelIndex; i < endIndex; i++) {
          const x = i % depthWidth;
          const y = Math.floor(i / depthWidth);
          const dataIdx = i * 4;
          
          const brightness = (data[dataIdx] + data[dataIdx + 1] + data[dataIdx + 2]) / 3;
          const alpha = data[dataIdx + 3];
          
          // Skip transparent pixels
          if (alpha === 0) {
            depthData[i] = 0;
            continue;
          }
          
          const distanceFromCenter = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
          const normalizedDistance = distanceFromCenter / maxDistance;
          
          // Combine brightness and distance for depth
          const depth = (brightness / 255) * (1 - normalizedDistance * 0.3);
          depthData[i] = depth;
          
          minDepth = Math.min(minDepth, depth);
          maxDepth = Math.max(maxDepth, depth);
          processedPixels++;
        }
        
        pixelIndex = endIndex;
      };
      
      // Process all chunks
      while (pixelIndex < totalPixels) {
        processChunk();
        
        // Yield control to prevent blocking
        if (pixelIndex < totalPixels) {
          await new Promise(resolve => setTimeout(resolve, 0));
        }
      }
      
      console.log('‚úÖ Procedural depth map complete:', {
        width: depthWidth,
        height: depthHeight,
        totalPixels: totalPixels,
        processedPixels: processedPixels,
        minDepth: minDepth.toFixed(3),
        maxDepth: maxDepth.toFixed(3)
      });
      
      return {
        data: depthData,
        width: depthWidth,
        height: depthHeight
      };
    }
    
    async _generateMesh(processedData) {
      console.log('üèóÔ∏è Generating 3D mesh...');
      
      const { image, depthMap } = processedData;
      
      // Create high-resolution geometry
      const meshResolution = 64;
      const geometry = new THREE.PlaneGeometry(2, 2, meshResolution - 1, meshResolution - 1);
      
      // Apply displacement from depth map
      const vertices = geometry.attributes.position.array;
      const depthData = depthMap.data || depthMap;
      const depthWidth = depthMap.width || meshResolution;
      const depthHeight = depthMap.height || meshResolution;
      
      let displacementCount = 0;
      let maxDisplacement = 0;
      
      for (let i = 0; i < vertices.length; i += 3) {
        const x = (vertices[i] + 1) * 0.5; // Convert from -1,1 to 0,1
        const y = (vertices[i + 1] + 1) * 0.5;
        
        // Sample depth value
        const depthX = Math.floor(x * depthWidth);
        const depthY = Math.floor(y * depthHeight);
        const depthIndex = depthY * depthWidth + depthX;
        
        // Apply depth displacement
        const depth = (depthData[depthIndex] || 0.5) - 0.5;
        const displacement = depth * 0.3;
        vertices[i + 2] = displacement;
        
        if (displacement !== 0) displacementCount++;
        maxDisplacement = Math.max(maxDisplacement, Math.abs(displacement));
      }
      
      geometry.attributes.position.needsUpdate = true;
      geometry.computeVertexNormals();
      
      console.log('üìä Mesh generation stats:', {
        vertices: vertices.length / 3,
        displacedVertices: displacementCount,
        maxDisplacement: maxDisplacement.toFixed(3),
        resolution: `${meshResolution}x${meshResolution}`
      });
      
      // Create material
      const texture = new THREE.TextureLoader().load(image);
      const material = new THREE.MeshPhongMaterial({
        map: texture,
        transparent: true,
        side: THREE.DoubleSide,
        shininess: 30,
        specular: 0x111111
      });
      
      const mesh = new THREE.Mesh(geometry, material);
      console.log('‚úÖ 3D mesh created successfully');
      
      return mesh;
    }
    
    _configureScene(mesh) {
      console.log('üé¨ Configuring scene...');
      
      // Apply scale
      mesh.scale.setScalar(this.settings.modelScale);
      this.scene.add(mesh);
      
      // Position camera
      this.camera.position.z = this.settings.cameraDistance;
      this.camera.position.y = this.settings.cameraHeight;
      
      // Hide loading indicator
      if (this.loading) {
        this.loading.style.display = 'none';
      }
      
      console.log('üéØ Scene configuration complete:', {
        meshScale: this.settings.modelScale,
        cameraPosition: {
          x: this.camera.position.x,
          y: this.camera.position.y,
          z: this.camera.position.z
        }
      });
    }
    
    async _createImageFromDataUrl(dataUrl) {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'anonymous';
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.src = dataUrl;
      });
    }
  }
  
  // Create realistic 3D object with AI depth estimation
  console.log('üñºÔ∏è Creating realistic 3D object from product image...');
  const imageUrl = '{{ product.featured_image | image_url: width: 600 }}';
  
  // Initialize the 3D system with proper error handling
  const system3D = new Product3DSystem({
    blockId: '{{ block.id }}',
    imageUrl: imageUrl,
    settings: {
      modelScale: {{ block.settings.model_scale | default: 1.5 }},
      cameraDistance: {{ block.settings.camera_distance | default: 3 }},
      cameraHeight: {{ block.settings.camera_height | default: 0 }},
      bgRemovalSensitivity: {{ block.settings.bg_removal_sensitivity | default: 5 }}
    },
    scene: scene,
    camera: camera,
    loading: loading
  });
  
  system3D.initialize()
    .then(mesh => {
      console.log('‚úÖ 3D system initialized successfully');
      window['model_{{ block.id | replace: "-", "_" }}'] = mesh;
      animate();
    })
    .catch(error => {
      console.error('‚ùå 3D system initialization failed:', error);
      if (loading) loading.style.display = 'none';
    });
  
  // Animation loop
  let animationStarted = false;
  let clock = new THREE.Clock();
  
  function animate() {
    if (!animationStarted) {
      console.log('üé¨ Animation loop started successfully!');
      animationStarted = true;
    }
    
    requestAnimationFrame(animate);
    
    const model = window['model_{{ block.id | replace: "-", "_" }}'];
    if (model) {
      // Continuous rotation
      const rotationSpeed = {{ block.settings.rotation_speed | default: 1 }} * 0.01;
      model.rotation.y += rotationSpeed;
      
      // Optional: slight up-down bobbing
      {% if block.settings.enable_bobbing %}
        model.position.y += Math.sin(clock.getElapsedTime() * 2) * 0.01;
      {% endif %}
    }
    
    try {
      renderer.render(scene, camera);
    } catch (renderError) {
      console.error('‚ùå Render error:', renderError);
    }
  }
  
  // Handle window resize
  function handleResize() {
    console.log('üîÑ Window resize detected');
    if (!container || !camera || !renderer) {
      console.log('‚ùå Missing objects for resize');
      return;
    }
    
    const width = container.offsetWidth;
    const height = container.offsetHeight;
    
    console.log('üìè New dimensions:', { width, height });
    
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
  }
  
  window.addEventListener('resize', handleResize);
  console.log('‚úÖ Resize listener added');
  
  // Handle visibility change for performance
  document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
      console.log('‚è∏Ô∏è Tab hidden - pausing animation');
      renderer.setAnimationLoop(null);
    } else {
      console.log('‚ñ∂Ô∏è Tab visible - resuming animation');
      renderer.setAnimationLoop(animate);
    }
  });
  console.log('‚úÖ Visibility change listener added');
  
  // Cleanup function
  window.addEventListener('beforeunload', function() {
    console.log('üßπ Cleaning up 3D resources...');
    if (renderer) {
      renderer.dispose();
    }
    if (model) {
      scene.remove(model);
    }
  });
  console.log('‚úÖ Cleanup listener added');
}
{% endif %}
</script>

{% schema %}
{
  "name": "Product Showcase",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Select Product"
    },
    {
      "type": "header",
      "content": "3D Display Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_3d",
      "label": "Enable 3D Spinning View",
      "default": false,
      "info": "Convert the product image into a spinning 3D display"
    },
    {
      "type": "range",
      "id": "rotation_speed",
      "label": "Rotation Speed",
      "min": 0,
      "max": 5,
      "step": 1,
      "default": 1,
      "info": "How fast the model rotates (0 = no rotation, 5 = fastest)"
    },
    {
      "type": "range",
      "id": "model_scale",
      "label": "Model Scale",
      "min": 0.5,
      "max": 3.0,
      "step": 0.1,
      "default": 1.5,
      "info": "Size of the 3D model"
    },
    {
      "type": "range",
      "id": "camera_distance",
      "label": "Camera Distance",
      "min": 1,
      "max": 8,
      "step": 0.5,
      "default": 3,
      "info": "How far the camera is from the model"
    },
    {
      "type": "range",
      "id": "camera_height",
      "label": "Camera Height",
      "min": -2,
      "max": 2,
      "step": 0.2,
      "default": 0,
      "info": "Vertical position of the camera"
    },
    {
      "type": "checkbox",
      "id": "enable_bobbing",
      "label": "Enable Gentle Bobbing Animation",
      "default": false,
      "info": "Adds a subtle up-down movement to the model"
    },
    {
      "type": "select",
      "id": "object_shape",
      "label": "3D Object Shape",
      "options": [
        {
          "value": "auto",
          "label": "Auto-detect (Recommended)"
        },
        {
          "value": "cylinder",
          "label": "Cylinder (Round products)"
        },
        {
          "value": "box",
          "label": "Box (Rectangular products)"
        }
      ],
      "default": "auto",
      "info": "Choose the 3D shape that best fits your product"
    },
    {
      "type": "range",
      "id": "bg_removal_sensitivity",
      "label": "Background Removal Sensitivity",
      "min": 1,
      "max": 10,
      "step": 1,
      "default": 5,
      "info": "Higher values remove more background (1=conservative, 10=aggressive)"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Featured Product"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Discover something amazing"
    },
    {
      "type": "textarea",
      "id": "paragraph",
      "label": "Description",
      "default": "Add your product description here. This is a great place to highlight key features and benefits that make your product special."
    },
    {
      "type": "header",
      "content": "Title Styling"
    },
    {
      "type": "range",
      "id": "title_size",
      "label": "Title Font Size",
      "min": 16,
      "max": 48,
      "step": 2,
      "default": 32,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title Color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Subtitle Styling"
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "label": "Subtitle Font Size",
      "min": 12,
      "max": 32,
      "step": 2,
      "default": 20,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle Color",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Text Styling"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text Font Size",
      "min": 12,
      "max": 24,
      "step": 1,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#333333"
    }
  ]
}
{% endschema %}

